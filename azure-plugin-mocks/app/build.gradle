/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

buildscript {
    ext {
        wiremockVersion = '2.27.2'
        lombokVersion = '1.18.20'
        sl4jVersion = '2.0.0-alpha2'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'idea'
    id "org.sonarqube" version "2.6.1"
}

ext {
    // artifactory
    mavenRepoUser = project.hasProperty('mavenRepoUser') ? mavenRepoUser : ""
    mavenRepoPassword = project.hasProperty('mavenRepoPassword') ? mavenRepoPassword : ""
    dockerRegistry = "docker.appdirect.tools"

    // artifactory credentials
    artifactoryUser = project.properties['ARTIFACTORY_USER']
    artifactoryPassword = project.properties['ARTIFACTORY_PASSWD']
    dockerRegistry = "docker.appdirect.tools"
    artifactVersion = project.version.toString()
    dockerName = "${dockerRegistry}/appdirect-app-connector/azure-plugin-mocks"
    dockerTags = getDockerTags()
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://artifactory.appdirect.tools/artifactory/repo" }
}

dependencies {
    implementation("com.github.tomakehurst:wiremock-jre8:${wiremockVersion}",
            "org.slf4j:slf4j-api:${sl4jVersion}",
            "org.slf4j:slf4j-simple:${sl4jVersion}"
    )
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor(
            "org.projectlombok:lombok:${lombokVersion}"
    )
}

jar {
    manifest {
        attributes "Main-Class": 'com.appdirect.appconnector.mocks.WiremockApplication'
    }
    exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
    from {
        configurations.runtimeClasspath.findAll().collect { it.isDirectory() ? it : zipTree(it) }
    }
}

apply plugin: 'maven-publish'

publishing.repositories {
    maven {
        name "appdirectArtifactory"
        url "https://artifactory.appdirect.tools/artifactory/libs-${artifactVersion.endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}-local"
        credentials {
            username = artifactoryUser
            password = artifactoryPassword
        }
    }
}

apply from: '../gradle/docker.gradle'

def getDockerTags() {
    def tags = []
    tags << project.version.toString()

    if (!project.version.toString().endsWith("-SNAPSHOT")) {
        // if it is not a SNAPSHOT, then also add the 'latest' tag
        tags << "latest"
    }
    return tags
}

/**
 * Print relevant information about this project
 */
task printMetadata {
    description "Prints the metadata information for this build."
    doLast {
        print """
		Project group: ${project.group}
		Project name: ${project.name}
		Project version: ${project.version}
		Artifact version: ${artifactVersion}
		Docker registry: ${dockerRegistry}
		Docker name: ${dockerName}
		Docker tags: ${dockerTags}
		"""
    }
}
